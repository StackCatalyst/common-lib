name: Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.3'
          cache: true
      
      - name: Run tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic -coverpkg=./... ./...
          go tool cover -func=coverage.txt | tee coverage.out
          COVERAGE=$(tail -1 coverage.out | awk '{print $3}' | sed 's/%//')
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "Code coverage is below 70%"
            exit 1
          fi
          go tool cover -html=coverage.txt -o coverage.html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html
          retention-days: 7

  version:
    name: Determine Version
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.semver.outputs.new_version }}
      version_changed: ${{ steps.semver.outputs.version_changed }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.2.1")
          # If no tag exists, we want to start with v1.2.1 but not create changelog from beginning
          if [ "$latest_tag" = "v1.2.1" ] && ! git rev-parse "v1.2.1" >/dev/null 2>&1; then
            echo "latest_tag=HEAD" >> $GITHUB_OUTPUT
            echo "initial_version=true" >> $GITHUB_OUTPUT
          else
            echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT
            echo "initial_version=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          if [ "${{ steps.latest_tag.outputs.initial_version }}" = "true" ]; then
            changelog="Initial release v1.2.1"
          else
            changelog=$(git log ${{ steps.latest_tag.outputs.latest_tag }}..HEAD --pretty=format:"- %s%n%b")
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Determine version bump
        id: semver
        run: |
          if [ "${{ steps.latest_tag.outputs.initial_version }}" = "true" ]; then
            echo "new_version=v1.2.1" >> $GITHUB_OUTPUT
            echo "version_changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          latest_version=${{ steps.latest_tag.outputs.latest_tag }}
          latest_version=${latest_version#v}
          
          IFS='.' read -r major minor patch <<< "$latest_version"
          
          # Check commit messages since last tag
          commits=$(git log ${{ steps.latest_tag.outputs.latest_tag }}..HEAD --pretty=format:"%s")
          
          version_changed="false"
          
          while IFS= read -r commit; do
            if [[ "$commit" == *"BREAKING CHANGE:"* ]]; then
              major=$((major + 1))
              minor=0
              patch=0
              version_changed="true"
              break
            elif [[ "$commit" == "feat:"* ]]; then
              minor=$((minor + 1))
              patch=0
              version_changed="true"
            elif [[ "$commit" == "fix:"* ]]; then
              patch=$((patch + 1))
              version_changed="true"
            fi
          done <<< "$commits"
          
          new_version="v${major}.${minor}.${patch}"
          
          echo "new_version=${new_version}" >> $GITHUB_OUTPUT
          echo "version_changed=${version_changed}" >> $GITHUB_OUTPUT

  release:
    name: Create Release
    needs: [test, version]
    if: needs.version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Changelog
        if: needs.version.outputs.version_changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get current date
          release_date=$(date +%Y-%m-%d)
          
          # Create new version section from Unreleased
          sed -i "s/## \[Unreleased\]/## [Unreleased]\n\n### Added\n- None\n\n### Changed\n- None\n\n### Deprecated\n- None\n\n### Removed\n- None\n\n### Fixed\n- None\n\n### Security\n- None\n\n## [${{ needs.version.outputs.new_version }}] - ${release_date}/" CHANGELOG.md
          
          # Update links at the bottom of the file
          if ! grep -q "\[Unreleased\]:" CHANGELOG.md; then
            echo -e "\n[Unreleased]: https://github.com/StackCatalyst/common-lib/compare/${{ needs.version.outputs.new_version }}...HEAD" >> CHANGELOG.md
            echo "[${{ needs.version.outputs.new_version }}]: https://github.com/StackCatalyst/common-lib/releases/tag/${{ needs.version.outputs.new_version }}" >> CHANGELOG.md
          else
            # Update existing links
            sed -i "/\[Unreleased\]/c\[Unreleased\]: https://github.com/StackCatalyst/common-lib/compare/${{ needs.version.outputs.new_version }}...HEAD" CHANGELOG.md
            sed -i "/^\[${{ needs.version.outputs.new_version }}/d" CHANGELOG.md
            sed -i "/\[Unreleased\]/a\[${{ needs.version.outputs.new_version }}]: https://github.com/StackCatalyst/common-lib/releases/tag/${{ needs.version.outputs.new_version }}" CHANGELOG.md
          fi
          
          # Configure git with token-based authentication
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git remote set-url origin https://github-actions[bot]:${GITHUB_TOKEN}@github.com/StackCatalyst/common-lib.git
          git add CHANGELOG.md
          git commit -m "docs: update changelog for ${{ needs.version.outputs.new_version }}"
          git push

      - name: Create Release Notes
        id: release_notes
        run: |
          # Extract the current version's changes from CHANGELOG.md
          awk '/^## \[${{ needs.version.outputs.new_version }}\]/{p=1;print;next} /^## \[/{p=0} p{print}' CHANGELOG.md > release_notes.md
          
          # Append installation and documentation information
          cat << EOF >> release_notes.md
          
          ## Installation
          \`\`\`bash
          go get github.com/StackCatalyst/common-lib@${{ needs.version.outputs.new_version }}
          \`\`\`
          
          ## Documentation
          See [Integration Guide](docs/INTEGRATION.md) for usage instructions.
          EOF

      - name: Create Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git remote set-url origin https://github-actions[bot]:${GITHUB_TOKEN}@github.com/StackCatalyst/common-lib.git
          git tag -a ${{ needs.version.outputs.new_version }} -m "Release ${{ needs.version.outputs.new_version }}"
          git push origin ${{ needs.version.outputs.new_version }}

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version.outputs.new_version }}
          release_name: Release ${{ needs.version.outputs.new_version }}
          body_path: release_notes.md
          draft: false
          prerelease: false

  notify:
    name: Notify Team
    needs: [release, version]
    if: needs.version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Send MS Teams notification
        uses: toko-bifrost/ms-teams-deploy-card@master
        with:
          github-token: ${{ github.token }}
          webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URL }}
          title: "New Release: common-lib ${{ needs.version.outputs.new_version }}"
          color: "00ff00"
          description: |
            A new version of common-lib has been released!
            
            **Version:** ${{ needs.version.outputs.new_version }}
            
            **Changes:**
            ${{ needs.version.outputs.changelog }}
            
            [View Release Notes](https://github.com/StackCatalyst/common-lib/releases/tag/${{ needs.version.outputs.new_version }}) 